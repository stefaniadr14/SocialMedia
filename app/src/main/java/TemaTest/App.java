/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import jdk.jshell.execution.Util;
import org.checkerframework.common.value.qual.StringVal;

import javax.management.StringValueExp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class App {

    static class Utilizator {
        private String username, password;
        private List<Postare> posts;
        private List<Utilizator> following, followers;
        private int likes;

        public Utilizator() {
        }
        public Utilizator(String username, String password) {
            this.username = username;
            this.password = password;
            this.posts = new ArrayList<>();
            this.following = new ArrayList<>();
            this.followers = new ArrayList<>();
            this.likes = 0;
        }

        public String getUsername() {
            return username;
        }
        public String getPassword() {
            return password;
        }
        public List<Postare> getPosts() {
            return posts;
        }

        public void addPost(Postare post) {
            posts.add(post);
        }

        //method for checking if the current user is following another user
        public boolean isFollowing(Utilizator user) {
            return following.contains(user);
        }

        //method for adding the user in the following list and the current user in the target user's followers list
        public void follow(Utilizator user) {

            if (!isFollowing(user)) {
                following.add(user);
                user.addFollower(this);
            }
        }
        public void addFollower(Utilizator user) {
            followers.add(user);
        }
        public void unfollow(Utilizator user) {
            following.remove(user);
            user.removeFollower(this);
        }
        public void removeFollower(Utilizator user) {
            followers.remove(user);
        }

        public List<Utilizator> getFollowing() {
            return following;
        }
        public List<Utilizator> getFollowers() {
            return followers;
        }
        public int getFollowersCount() {
            return followers.size();
        }

        //methods for the number of likes a user has, from posts and comments
        public void setLikes(int likes) {
            this.likes = likes;
        }
        public int getLikes() {
            return likes;
        }
    }

    static class Postare implements Likeable{
        private String content, date;
        private Utilizator author;
        private List<Utilizator> likes;
        private List<Comentariu> comments;
        private int id;

        public Postare(int id, String content, Utilizator author, String date) {
            this.id = id;
            this.content = content;
            this.author = author;
            this.likes = new ArrayList<>();
            this.comments = new ArrayList<>();
            this.date = date;
        }

        public int getId() {
            return id;
        }
        public void setId(int id) {
            this.id = id;
        }
        public Utilizator getAuthor() {
            return author;
        }
        public List<Comentariu> getComments() {
            return comments;
        }

        public String getDate() {
            return date;
        }

        public String getContent() {
            return content;
        }

        @Override
        public void like(Utilizator user) {
            if (!likes.contains(user)) {
                likes.add(user);
            }
        }
        @Override
        public void unlike(Utilizator user) {
            if (likes.contains(user)) {
                likes.remove(user);
            }
        }
        @Override
        public int getLikesCount() {
            return likes.size();
        }
        @Override
        public List<Utilizator> getLikedBy() {
            return new ArrayList<>(likes);
        }

        public void addComment(Comentariu comment) {
            comments.add(comment);
        }
        public int getCommentsCount() {
            return comments.size();
        }
    }

    static class Comentariu implements Likeable{
        private String content, date;
        private Postare post;
        private Utilizator author;
        private List<Utilizator> likes;
        private int id;

        public Comentariu(int id, String content, Postare post, Utilizator author, String date) {
            this.id = id;
            this.content = content;
            this.post = post;
            this.likes = new ArrayList<>();
            this.author = author;
            this.date = date;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public Utilizator getAuthor() {
            return author;
        }

        public String getDate() {
            return date;
        }

        public String getContent() {
            return content;
        }

        @Override
        public void like(Utilizator user) {
            if (!likes.contains(user)) {
                likes.add(user);
            }
        }

        @Override
        public void unlike(Utilizator user) {
            if (likes.contains(user)) {
                likes.remove(user);
            }
        }

        @Override
        public int getLikesCount() {
            return likes.size();
        }

        @Override
        public List<Utilizator> getLikedBy() {
            return new ArrayList<>(likes);
        }
    }

    public interface Likeable {
        void like(Utilizator user);
        void unlike(Utilizator user);
        int getLikesCount();
        List<Utilizator> getLikedBy();
    }
    
public App() {/* compiled code */}

    private static ArrayList<Utilizator> utilizatori = new ArrayList<>();
    // initializing ids for posts and comments
    private static int nextPostId = 1, nextCommentId = 1;

    public static void main(String[] strings) {
        if (strings == null) {
            System.out.println("Hello world!");
            return;
        }
        String username = null;
        String password = null;

        if (strings[0].equals("-create-user")) {
            if (strings.length < 2) {
                printErrorMessage("Please provide username");
            } else if (strings.length == 2) {
                printErrorMessage("Please provide password");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                createUser(username, password);
            }
        } else if (strings[0].equals("-create-post")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No text provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String postContent = getArg(strings[3]);
                    if (postContent.length() > 300) {
                        printErrorMessage("Post text length exceeded");
                    } else {
                        //get current user using the username
                        Utilizator currentUser = getUser(username);
                        //format the date for the post
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        Date date = new Date();
                        String currentDateAsString = dateFormat.format(date);
                        //create the post and adding it to the user's post list
                        Postare post = new Postare(nextPostId, postContent, currentUser, currentDateAsString);
                        currentUser.addPost(post);
                        nextPostId++;
                        printOkMessage("Post added successfully");
                    }
                }
            }
        } else if (strings[0].equals("-delete-post-by-id")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No identifier was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    //get the post id and convert it to int
                    String id = getArg(strings[3]);
                    int postId = Integer.parseInt(id);
                    Utilizator currentUser = getUser(username);
                    //find the index of the post from the user's list
                    int postIndex = -1;
                    for (int i = 0; i < currentUser.getPosts().size(); i++) {
                        if (currentUser.getPosts().get(i).getId() == postId) {
                            postIndex = i;
                            break;
                        }
                    }
                    //if found, the post will be removed and then the ids will be reconfigurated
                    if (postIndex != -1) {
                        currentUser.getPosts().remove(postIndex);

                        for (int i = postIndex; i < currentUser.getPosts().size(); i++) {
                            currentUser.getPosts().get(i).setId(currentUser.getPosts().get(i).getId() - 1);
                        }

                        printOkMessage("Post deleted successfully");
                    } else {
                        printErrorMessage("The identifier was not valid");
                    }
                }
            }
        } else if (strings[0].equals("-follow-user-by-username")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No username to follow was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    //get the user to follow, if it's null it means that it doesn't exist
                    String targetUsername = getArg(strings[3]);
                    Utilizator targetUser = getUser(targetUsername);
                    if (targetUser == null) {
                        printErrorMessage("The username to follow was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);
                        //the user cannot follow another user more than once
                        if (currentUser.isFollowing(targetUser)) {
                            printErrorMessage("The username to follow was not valid");
                        } else {
                            currentUser.follow(targetUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-unfollow-user-by-username")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No username to unfollow was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String targetUsername = getArg(strings[3]);
                    Utilizator targetUser = getUser(targetUsername);
                    if (targetUser == null) {
                        printErrorMessage("The username to unfollow was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);
                        //the user cannot unfollow an user if it didn't follow him first
                        if (!currentUser.isFollowing(targetUser)) {
                            printErrorMessage("The username to unfollow was not valid");
                        } else {
                            currentUser.unfollow(targetUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-like-post")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No post identifier to like was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int postId = Integer.parseInt(id);

                    Postare targetPost = getPost(postId);

                    if (targetPost == null) {
                        printErrorMessage("The post identifier to like was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);
                        // the user cannot like a post from himself nor a post he already liked
                        if (currentUser.equals(targetPost.getAuthor())) {
                            printErrorMessage("The post identifier to like was not valid");
                        } else if (targetPost.getLikedBy().contains(currentUser)) {
                            printErrorMessage("The post identifier to like was not valid");
                        } else {
                            targetPost.like(currentUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-unlike-post")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No post identifier to unlike was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int postId = Integer.parseInt(id);

                    Postare targetPost = getPost(postId);

                    if (targetPost == null) {
                        printErrorMessage("The post identifier to unlike was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);

                        if (currentUser.equals(targetPost.getAuthor())) {
                            printErrorMessage("The post identifier to unlike was not valid");
                        } else if (!targetPost.getLikedBy().contains(currentUser)) {
                            printErrorMessage("The post identifier to unlike was not valid");
                        } else {
                            targetPost.unlike(currentUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-like-comment")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No comment identifier to like was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int commId = Integer.parseInt(id);

                    Comentariu comment = getComment(commId);

                    if (comment == null) {
                        printErrorMessage("The comment identifier to like was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);

                        if (currentUser.equals(comment.getAuthor())) {
                            printErrorMessage("The comment identifier to like was not valid");
                        } else if (comment.getLikedBy().contains(currentUser)) {
                            printErrorMessage("The comment identifier to like was not valid");
                        } else {
                            comment.like(currentUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-unlike-comment")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No comment identifier to unlike was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int commId = Integer.parseInt(id);

                    Comentariu comment = getComment(commId);

                    if (comment == null) {
                        printErrorMessage("The comment identifier to unlike was not valid");
                    } else {
                        Utilizator currentUser = getUser(username);

                        if (currentUser.equals(comment.getAuthor())) {
                            printErrorMessage("The comment identifier to unlike was not valid");
                        } else if (!comment.getLikedBy().contains(currentUser)) {
                            printErrorMessage("The comment identifier to unlike was not valid");
                        } else {
                            comment.unlike(currentUser);
                            printOkMessage("Operation executed successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-get-followings-posts")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    Utilizator currentUser = getUser(username);
                    // create another list with all the posts from the following users
                    ArrayList<Postare> posts= new ArrayList<>();
                    for (Utilizator user : currentUser.getFollowing()) {
                        for (Postare post : user.getPosts()) {
                            posts.add(post);
                        }
                    }
                    // sort them by id (even if it is the same date, the newest post will have the biggest id number)
                    Collections.sort(posts, Comparator.comparingInt(Postare::getId).reversed());

                    int i = 0;
                    System.out.print("{'status':'ok','message': [");
                    for (Postare post : posts) {
                        System.out.print("{'post_id':'" + post.getId() + "','post_text':'" + post.getContent() + "','post_date':'" + post.getDate() + "','username':'" + post.getAuthor().getUsername() + "'}");
                        if (i < posts.size() - 1) {
                            System.out.print(",");
                        }
                        i++;
                    }
                    System.out.println("]}");
                }
            }
        } else if (strings[0].equals("-get-user-posts")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No username to list posts was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    Utilizator user = getUser(username);
                    String username1 = getArg(strings[3]);
                    Utilizator targetUser = getUser(username1);

                    // cannot see the posts if the user doesn't exist or is not followed
                    if (!utilizatori.contains(targetUser)) {
                        printErrorMessage("The username to list posts was not valid");
                    } else if (!user.getFollowing().contains(targetUser)) {
                        printErrorMessage("The username to list posts was not valid");
                    } else {
                        Collections.sort(targetUser.getPosts(), Comparator.comparingInt(Postare::getId).reversed());

                        int i = 0;
                        System.out.print("{'status':'ok','message': [");
                        for (Postare post : targetUser.getPosts()) {
                            System.out.print("{'post_id':'" + post.getId() + "','post_text':'" + post.getContent() + "','post_date':'" + post.getDate() + "'}");
                            if (i < targetUser.getPosts().size() - 1) {
                                System.out.print(",");
                            }
                            i++;
                        }
                        System.out.println("]}");
                    }
                }
            }
        } else if (strings[0].equals("-get-post-details")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No post identifier was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int postId = Integer.parseInt(id);
                    Postare targetPost = getPost(postId);

                    Utilizator currentUser = getUser(username);

                    if (targetPost == null) {
                        printErrorMessage("The post identifier was not valid");
                    } else {
                        int i = 0;
                        System.out.print("{'status':'ok','message': [{");
                        System.out.print("'post_text':'" + targetPost.getContent() + "','post_date':'" + targetPost.getDate() + "','username':'" + targetPost.getAuthor().getUsername() + "','number_of_likes':'" + targetPost.getLikesCount());
                        System.out.print("','comments': [{");
                        // sort the comments by date using the id
                        Collections.sort(targetPost.getComments(), Comparator.comparingInt(Comentariu::getId).reversed());
                        for (Comentariu comentariu : targetPost.getComments()) {
                            System.out.print("'comment_id':'" + comentariu.getId() + "','comment_text':'" + comentariu.getContent() + "','comment_date':'" + comentariu.getDate() + "','username':'" + comentariu.getAuthor().getUsername() + "','number_of_likes':'" + comentariu.getLikesCount() + "'");
                            if (i < targetPost.getComments().size() - 1) {
                                System.out.print(",");
                            }
                        }
                        System.out.println("}] }] }");
                    }
                }
            }
        } else if (strings[0].equals("-comment-post")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length < 5) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No text provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String comment = getArg(strings[4]);
                    if (comment.length() > 300) {
                        printErrorMessage("Comment text length exceeded");
                    } else {
                        String commentContent = getArg(strings[4]);
                        Utilizator currentUser = getUser(username);
                        String id = getArg(strings[3]);
                        int postId = Integer.parseInt(id);

                        Postare targetPost = getPost(postId);

                        if (targetPost == null) {
                            printErrorMessage("The post identifier to like was not valid");
                        } else {
                            // format the date for the comment
                            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                            Date date = new Date();
                            String currentDateAsString = dateFormat.format(date);
                            // create the comment and add it to the list for the post
                            Comentariu comentariu = new Comentariu(nextCommentId, commentContent, targetPost, currentUser, currentDateAsString);
                            targetPost.addComment(comentariu);
                            nextCommentId++;
                            printOkMessage("Comment added successfully");
                        }
                    }
                }
            }
        } else if (strings[0].equals("-delete-comment-by-id")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No identifier was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    String id = getArg(strings[3]);
                    int commId = Integer.parseInt(id);
                    Utilizator currentUser = getUser(username);
                    // find the index of the comment in its post's list and save the post and author of the comment
                    int commIndex = -1;
                    int i = 0;
                    Postare postare = null;
                    Utilizator author = null;
                    for (Utilizator user : utilizatori) {
                        for (Postare post : user.getPosts()) {
                            for (Comentariu comentariu : post.getComments()) {
                                if (comentariu.getId() == commId) {
                                    commIndex = i;
                                    postare = post;
                                    author = comentariu.getAuthor();
                                    break;
                                }
                                i++;
                            }
                        }
                    }

                    if (commIndex != -1) {
                        // the comment can be deleted only by the author of the post or its author
                        if (author.getUsername().equals(currentUser.getUsername())) {
                            postare.getComments().remove(commIndex);
                            for (int j = commIndex; j < postare.getComments().size(); j++) {
                                postare.getComments().get(j).setId(postare.getComments().get(j).getId() - 1);
                            }
                            printOkMessage("Operation executed successfully");
                        } else {
                            printErrorMessage("The identifier was not valid");
                        }
                    } else {
                        printErrorMessage("The identifier was not valid");
                    }
                }
            }
        } else if (strings[0].equals("-get-following")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    Utilizator currentUser = getUser(username);

                    List<Utilizator> followingUsers = currentUser.getFollowing();

                    System.out.print("{'status':'ok','message': [");
                    int i = 0;
                    for (Utilizator followingUser : followingUsers) {
                        System.out.print(" '" + followingUser.getUsername() + "'");
                        if (i < followingUsers.size() - 1) {
                            System.out.print(",");
                        }
                        i++;
                    }
                    System.out.println("]}");
                }
            }
        } else if (strings[0].equals("-get-followers")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else if (strings.length == 3) {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 1) {
                    printErrorMessage("No username to list followers was provided");
                } else {
                    printErrorMessage("Login failed");
                }
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    Utilizator currentUser = getUser(username);

                    List<Utilizator> followers = currentUser.getFollowers();

                    if (followers.isEmpty()) {
                        printErrorMessage("The username to list followers was not valid");
                    } else {
                        System.out.print("{'status':'ok','message': [");
                        int i = 0;
                        for (Utilizator followingUser : followers) {
                            System.out.print(" '" + followingUser.getUsername() + "'");
                            if (i < followers.size() - 1) {
                                System.out.print(",");
                            }
                            i++;
                        }
                        System.out.println("]}");
                    }
                }
            }
        } else if (strings[0].equals("-get-most-liked-posts")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    // put all posts in a new array
                    ArrayList<Postare> posts = new ArrayList<>();
                    for (Utilizator user : utilizatori) {
                        for (Postare post : user.getPosts()) {
                            posts.add(post);
                        }
                    }
                    // sort the posts by the number of likes
                    Collections.sort(posts, Comparator.comparingInt(Postare::getLikesCount).reversed());

                    int i = 0;
                    System.out.print("{'status':'ok','message': [");
                    for (Postare post : posts) {
                        System.out.print("{'post_id':'" + post.getId() + "','post_text':'" + post.getContent() + "','post_date':'" + post.getDate() + "','username':'" + post.getAuthor().getUsername() + "','number_of_likes':'" + post.getLikesCount() + "'}");
                        if (i < posts.size() - 1) {
                            System.out.print(",");
                        }
                        i++;
                        // stop after the top 5 is printed
                        if (i == 5) {
                            break;
                        }
                    }
                    System.out.println(" ]}");
                }
            }
        } else if (strings[0].equals("-get-most-commented-posts")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    ArrayList<Postare> posts = new ArrayList<>();
                    for (Utilizator user : utilizatori) {
                        for (Postare post : user.getPosts()) {
                            posts.add(post);
                        }
                    }
                    Collections.sort(posts, Comparator.comparingInt(Postare::getCommentsCount).reversed());

                    int i = 0;
                    System.out.print("{'status':'ok','message': [");
                    for (Postare post : posts) {
                        System.out.print("{'post_id':'" + post.getId() + "','post_text':'" + post.getContent() + "','post_date':'" + post.getDate() + "','username':'" + post.getAuthor().getUsername() + "','number_of_comments':'" + post.getCommentsCount() + "'}");
                        if (i < posts.size() - 1) {
                            System.out.print(",");
                        }
                        i++;
                        if (i == 5) {
                            break;
                        }
                    }
                    System.out.println("]}");
                }
            }
        } else if (strings[0].equals("-get-most-followed-users")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    Collections.sort(utilizatori, Comparator.comparingInt(Utilizator::getFollowersCount).reversed());
                    int i = 0;
                    System.out.print("{'status':'ok','message': [");
                    for (Utilizator user : utilizatori) {
                        System.out.print("{'username':'" + user.getUsername() + "','number_of_followers':'" + user.getFollowersCount() + "'}");
                        if (i < utilizatori.size() - 1 && i < 4) {
                            System.out.print(",");
                        }
                        i++;
                        if (i == 5) {
                            break;
                        }
                    }
                    System.out.println(" ]}");
                }
            }
        } else if (strings[0].equals("-get-most-liked-users")) {
            if (strings.length < 3) {
                printErrorMessage("You need to be authenticated");
            } else {
                username = getArg(strings[1]);
                password = getArg(strings[2]);
                if (login(username, password) == 0) {
                    printErrorMessage("Login failed");
                } else {
                    for (Utilizator user : utilizatori) {
                        int likes = 0;
                        // add to the likes count the number of likes from each post
                        for (Postare post : user.getPosts()) {
                            likes += post.getLikesCount();
                        }
                        // add the number of likes from each comment the user wrote
                        for (Utilizator user1 : utilizatori) {
                            for (Postare postare : user1.getPosts()) {
                                for (Comentariu comment : postare.getComments()) {
                                    if (comment.getAuthor().equals(user)) {
                                        likes += comment.getLikesCount();
                                    }
                                }
                            }
                        }
                        // set the number of likes for each user
                        user.setLikes(likes);
                    }
                    // sort the users by the number of likes
                    Collections.sort(utilizatori, Comparator.comparingInt(Utilizator::getLikes).reversed());
                    // print the top 5
                    int i = 0;
                    System.out.print("{'status':'ok','message': [");
                    for (Utilizator utilizator : utilizatori) {
                        System.out.print("{'username':'" + utilizator.getUsername() + "','number_of_likes':'" + utilizator.getLikes() + "'}");
                        if (i < utilizatori.size() - 1 && i < 4) {
                            System.out.print(",");
                        }
                        i++;
                        if (i == 5) {
                            break;
                        }
                    }
                    System.out.println("]}");
                }
            }
        } else if (strings[0].equals("-cleanup-all")) {
            cleanupAll();
        }
    }
    private static void printErrorMessage(String message) {
        System.out.println("{ 'status' : 'error', 'message' : '" + message + "'}");
    }

    private static void printOkMessage(String message) {
        System.out.println("{ 'status' : 'ok', 'message' : '" + message + "'}");
    }

    // method for extracting the information from the arguments
    private static String getArg(String string) {
        int index = string.indexOf("'");
        int lastIdx = string.lastIndexOf("'");
        String substring = string.substring(index + 1, lastIdx);
        return substring;
    }

    // method for creating an user if it doesn't already exist
    private static void createUser(String username, String password) {
        if (userExists(username)) {
            printErrorMessage("User already exists");
        } else {
            Utilizator newUtilizator = new Utilizator(username, password);
            utilizatori.add(newUtilizator);
            printOkMessage("User created successfully");
        }
    }

    private static boolean userExists(String username) {
        for (Utilizator user : utilizatori) {
            if (user.getUsername().equals(username)) {
                return true;
            }
        }
        return false;
    }

    // method which returns if the authentification is succesful or not
    private static int login(String username, String password) {
        if (!userExists(username)) {
            return 0;
        } else {
            String userPassword = null;
            for (Utilizator user : utilizatori) {
                if (user.getUsername().equals(username)) {
                    userPassword = user.getPassword();
                    break;
                }
            }
            if (!userPassword.equals(password)) {
                return 0;
            } else {
                return 1;
            }
        }
    }

    // method for finding the user using the username
    private static Utilizator getUser(String username) {
        Utilizator currentUser = null;
        for (Utilizator user : utilizatori) {
            if (user.getUsername().equals(username)) {
                currentUser = user;
                break;
            }
        }
        return currentUser;
    }

    private static Postare getPost(int postId) {
        int ok = 0;
        for (Utilizator user : utilizatori) {
            for (Postare post : user.getPosts()) {
                if (post.getId() == postId) {
                    return post;
                }
            }
        }
        return null;
    }

    private static Comentariu getComment(int id) {
        int ok = 0;
        for (Utilizator user : utilizatori) {
            for (Postare post : user.getPosts()) {
                for (Comentariu comentariu : post.getComments())
                if (comentariu.getId() == id) {
                    return comentariu;
                }
            }
        }
        return null;
    }

    // clearing the arrays used and resetting the ids for posts and comments
    private static void cleanupAll() {
        for (Utilizator user : utilizatori) {
            for (Postare post : user.getPosts()) {
                post.getComments().clear();
            }
            user.getPosts().clear();
        }
        utilizatori.clear();
        nextPostId = 1;
        nextCommentId = 1;
        printOkMessage("Cleanup finished successfully");
    }
}